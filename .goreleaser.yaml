# Copyright (c) 2024 Six After, Inc.
#
# This source code is licensed under the Apache 2.0 License found in the
# LICENSE file in the root directory of this source tree.

# yaml-language-server: $schema=https://goreleaser.com/static/schema.json
# vim: set ts=2 sw=2 tw=0 fo=jcroql
version: 2

snapshot:
  version_template: "{{ incpatch .Version }}-alpha"

# Ref: https://goreleaser.com/customization/builds/
project_name: nanoid

# Ref: https://goreleaser.com/customization/changelog/
changelog:
  # Sorts the changelog by the commit's messages.
  # Could either be asc, desc or empty
  # Empty means 'no sorting', it'll use the output of `git log` as is.
  sort: asc

  # Changelog generation implementation to use.
  #
  # Valid options are:
  # - `git`: uses `git log`;
  # - `github`: uses the compare GitHub API, appending the author username to the changelog.
  # - `gitlab`: uses the compare GitLab API, appending the author name and email to the changelog (requires a personal access token).
  # - `gitea`: uses the compare Gitea API, appending the author username to the changelog.
  # - `github-native`: uses the GitHub release notes generation API, disables the groups feature.
  #
  # Default: 'git'.
  use: github

  # Max commit hash length to use in the changelog.
  #
  # 0: use whatever the changelog implementation gives you
  # -1: remove the commit hash from the changelog
  # any other number: max length.
  abbrev: 0

  filters:
    # Commit messages matching the regexp listed here will be the only ones
    # added to the changelog
    #
    # If include is not-empty, exclude will be ignored.
    #
    # Matches are performed against the first line of the commit message only,
    # prefixed with the commit SHA1, usually in the form of
    # `<abbrev-commit>[:] <title-commit>`.
    include:
      - "(?i)^feature:"
      - "(?i)^defect:"
      - "(?i)^debt:"
      - "(?i)^risk:"

  # Group commits messages by given regex and title.
  # Order value defines the order of the groups.
  # Providing no regex means all commits will be grouped under the default group.
  #
  # Matches are performed against the first line of the commit message only,
  # prefixed with the commit SHA1, usually in the form of
  # `<abbrev-commit>[:] <title-commit>`.
  # Groups are disabled when using github-native, as it already groups things by itself.
  # Regex use RE2 syntax as defined here: https://github.com/google/re2/wiki/Syntax.
  groups:
    - title: "üéâ Features"
      regexp: '(?i)^.*?feature(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: "üêõ Defects"
      regexp: '(?i)^.*?defect(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "üõ† Technical Debt"
      regexp: '(?i)^.*?debt(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: "üöÄ Technical Risk"
      regexp: '(?i)^.*?risk(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999

# Ref: https://goreleaser.com/customization/builds/
builds:
  # You can have multiple builds defined as a yaml list
  - # Path to main.go file or main package.
    # Notice: when used with `gomod.proxy`, this must be a package.
    #
    # Default: `.`.
    main: main.go

    # Binary name.
    # Can be a path (e.g. `bin/app`) to wrap the binary in a directory.
    #
    # Default: Project directory name.
    binary: nanoid

    # Custom ldflags.
    #
    # Default: '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser'.
    # Templates: allowed.
    ldflags:
      - -s -w -X github.com/sixafter/nanoid-cli/cmd/version.version={{ .Version }} -X github.com/sixafter/nanoid-cli/cmd/version.gitCommitID={{ .Env.X_BUILD_COMMIT }}

    # Set the modified timestamp on the output binary, typically
    # you would do this to ensure a build was reproducible.
    # Pass an empty string to skip modifying the output.
    #
    # Templates: allowed.
    mod_timestamp: "{{ .CommitTimestamp }}"

    # GOOS list to build for.
    # For more info refer to: https://go.dev/doc/install/source#environment
    #
    # Default: [ 'darwin', 'linux', 'windows' ].
    goos:
      - 'linux'
      - 'darwin'
      - 'windows'

    # GOARCH to build for.
    # For more info refer to: https://go.dev/doc/install/source#environment
    #
    # Default: [ '386', 'amd64', 'arm64' ].
    goarch:
      - 'amd64'
      - 'arm64'

    # GOAMD64 to build when GOARCH is amd64.
    # For more info refer to: https://go.dev/doc/install/source#environment
    #
    # Valid values are v1 (default), v2, v3, v4.
    # See the Go wiki MinimumRequirements page for more information:
    #   https://go.dev/wiki/MinimumRequirements#amd64
    # Default: [ 'v1' ].
    goamd64:
      - 'v1'

    # GOARM to specify which 32-bit arm version to use if there are multiple
    # versions from the build section. Brew formulas support only one 32-bit
    # version.
    #
    # Default: 6.
    #goarm:
    #  - '7'

    # Set a specific go binary to use when building.
    # It is safe to ignore this option in most cases.
    #
    # Default: "go".
    # Templates: allowed.
    # gobinary: "go1.23.3"

    flags:
      - -trimpath

checksum:
  name_template: 'checksums.txt'

signs:
  - id: checksums
    cmd: cosign
    stdin: '{{ .Env.COSIGN_PASSWORD }}'
    output: true
    artifacts: checksum
    args:
      - sign-blob
      - --yes
      - --key
      - env://COSIGN_PRIVATE_KEY
      - '--output-certificate=${certificate}'
      - '--output-signature=${signature}'
      - '${artifact}'

  - id: binaries
    cmd: cosign
    stdin: '{{ .Env.COSIGN_PASSWORD }}'
    output: true
    artifacts: archive
    args:
      - sign-blob
      - --yes
      - --key
      - env://COSIGN_PRIVATE_KEY
      - '--output-certificate=${certificate}'
      - '--output-signature=${signature}'
      - '${artifact}'

# Ref: https://goreleaser.com/customization/archive/
archives:
  - id: tar

    # Archive format.
    #
    # If format is `binary`, no archives are created and the binaries are instead
    # uploaded directly.
    #
    # Valid options are:
    # - `tar.gz`
    # - `tgz`
    # - `tar.xz`
    # - `txz`
    # - `tar.zst`
    # - `tzst` (since v2.1)
    # - `tar`
    # - `gz`
    # - `zip`
    # - `binary`
    #
    # Default: 'tar.gz'.
    formats: [tar.gz]

    # Additional files/globs you want to add to the archive.
    #
    # Default: [ 'LICENSE*', 'README*', 'CHANGELOG', 'license*', 'readme*', 'changelog'].
    # Templates: allowed.
    files:
      - LICENSE
      - README.md
      - CHANGELOG/CHANGELOG*

  - id: zip

    # Archive format.
    #
    # If format is `binary`, no archives are created and the binaries are instead
    # uploaded directly.
    #
    # Valid options are:
    # - `tar.gz`
    # - `tgz`
    # - `tar.xz`
    # - `txz`
    # - `tar.zst`
    # - `tzst` (since v2.1)
    # - `tar`
    # - `gz`
    # - `zip`
    # - `binary`
    #
    # Default: 'tar.gz'.
    formats: [zip]

    # Additional files/globs you want to add to the archive.
    #
    # Default: [ 'LICENSE*', 'README*', 'CHANGELOG', 'license*', 'readme*', 'changelog'].
    # Templates: allowed.
    files:
      - LICENSE
      - README.md
      - CHANGELOG/CHANGELOG*

# Ref: https://goreleaser.com/customization/release/
release:
  # Repo in which the release will be created.
  # Default: extracted from the origin remote URL or empty if its private hosted.
  github:
    owner: sixafter
    name: nanoid-cli

  # You can change the name of the release.
  #
  # Default: '{{.Tag}}' ('{{.PrefixedTag}}' on Pro).
  # Templates: allowed.
  name_template: 'v{{ .Version }}'

  # Footer for the release body.
  #
  # Templates: allowed.
  footer: |
    **Full Changelog**: [https://github.com/sixafter/nanoid-cli/tree/main/CHANGELOG/CHANGELOG-1.x](https://github.com/sixafter/nanoid-cli/tree/main/CHANGELOG/CHANGELOG-1.x.md)

# Ref: https://goreleaser.com/customization/homebrew_casks/
#homebrew_casks:
# Ref: https://goreleaser.com/customization/homebrew/
brews:
  # Name of the recipe
  - name: nanoid

    #alternative_names:
    #  - "nanoid@{{ .Major }}.{{ .Minor }}"

    # IDs of the archives to use.
    # Empty means all IDs.
    # ids:
    #  - tar

    # IDs of the archives to use.
    # Empty means all IDs.
    ids:
      - tar

    # Templates: allowed.
    commit_msg_template: "Brew formula update for {{ .ProjectName }} version {{ .Tag }}"

    # URL which is determined by the given Token (github, gitlab or gitea).
    # url_template: "https://github.com/sixafter/nanoid-cli/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

    # Directory inside the repository to put the formula.
    directory: Formula

    # Your app's homepage.
    #
    # Default: inferred from global metadata.
    homepage: "https://github.com/sixafter/homebrew-nanoid-cli/"

    # Your app's description.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    description: "A simple, fast, and concurrent command-line tool for generating secure, URL-friendly unique string IDs using the NanoID Go implementation."

    license: "Apache 2.0"

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed.
      owner: sixafter

      # Repository name.
      #
      # Templates: allowed.
      name: homebrew-tap

      # Optionally a branch can be provided.
      #
      # Default: default repository branch.
      # Templates: allowed.
      # Example: "{{.ProjectName}}-{{.Version}}"
      # branch: main
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      #
      # Templates: allowed.
      token: "{{ .Env.X_GITHUB_TOKEN }}"

      # Sets up pull request creation instead of just pushing to the given branch.
      # Make sure the 'branch' property is different from base before enabling
      # it.
      pull_request:
        # Whether to enable it or not.
        enabled: false

        # Whether to open the PR as a draft or not.
        draft: true

        # Base can also be another repository, in which case the owner and name
        # above will be used as HEAD, allowing cross-repository pull requests.
        base:
          owner: sixafter
          name: homebrew-tap
          branch: main

# Ref: https://goreleaser.com/customization/homebrew_casks/
homebrew_casks:
  -
    # Name of the cask
    #
    # Default: the project name.
    # Templates: allowed.
    name: nanoid

    # Alternative names for the current cask.
    #
    # Useful if you want to publish a versioned cask as well, so users can
    # more easily downgrade.
    #
    # This feature is only available in GoReleaser Pro.
    # Templates: allowed.
    #alternative_names:
    #  - nanoid@{{ .Version }}
    #  - nanoid@{{ .Major }}

    # IDs of the archives to use.
    # Empty means all IDs.
    ids:
      - tar

    # Binary name inside the cask
    #
    # Default: the cask name.
    # Templates: allowed.
    binary: nanoid

    # App to use instead of the binary.
    # This will then make GoReleaser use only the DMG files instead of archives.
    #
    # Pro only.
    # Templates: allowed.
    #app: NanoID.app

    # Path to the manpage file
    #
    # Templates: allowed.
    #manpage: man/nanoid.1

    # Completions for different shells
    #
    # Templates: allowed.
    #completions:
    #  bash: completions/nanoid.bash
    #  zsh: completions/nanoid.zsh
    #  fish: completions/nanoid.fish

    # This information will be used to build the URL section of your Cask.
    #
    # You can set the template, as well as additional parameters.
    # These parameters can be used to provide extra headers, cookies, or other
    # download requirements for your application.
    # See https://docs.brew.sh/Cask-Cookbook#additional-url-parameters for more details.
    #
    # All fields are optional.
    url:
      # URL which is determined by the given Token (github, gitlab or gitea).
      #
      # Default depends on the client.
      # Templates: allowed.
      template: "https://github.com/sixafter/nanoid-cli/releases/download/{{ .Tag }}/{{ .ArtifactName }}"

      # Used when the domains of `url` and `homepage` differ.
      # Templates: allowed.
      verified: "github.com/sixafter/nanoid-cli/"

      # Download strategy or format specification
      # See official Cask Cookbook for allowed values.
      # Templates: allowed.
      using: ":homebrew_curl"

      # HTTP cookies to send with the download request
      # Templates: allowed.
      #cookies:
      #  license: "accept-backup"

      # HTTP referer header
      # Templates: allowed.
      #referer: "https://example.com/download-page"

      # Additional HTTP headers
      # Templates: allowed.
      #headers:
      #  - "X-Version: {{ .Version }}"

      # Custom User-Agent header
      # Templates: allowed.
      #user_agent: "NanoID/1.0 (macOS)"

      # Custom body when using POST request
      # Templates: allowed.
      #data:
      #  format: "dmg"
      #  platform: "mac"

    # Git author used to commit to the repository.
    # Templates: allowed.
    commit_author:
      name: goreleaserbot
      email: bot@goreleaser.com

    # The project name and current git tag are used in the format string.
    #
    # Templates: allowed.
    commit_msg_template: "Brew cask update for {{ .ProjectName }} version {{ .Tag }}"

    # Directory inside the repository to put the cask.
    # Default: Casks
    directory: Casks

    # Caveats for the user of your binary.
    #caveats: "How to use this binary"

    # Your app's homepage.
    #
    # Default: inferred from global metadata.
    homepage: "https://github.com/sixafter/homebrew-nanoid-cli/"

    # Your app's description.
    #
    # Templates: allowed.
    # Default: inferred from global metadata.
    description: "A simple, fast, and concurrent command-line tool for generating secure, URL-friendly unique string IDs using the NanoID Go implementation."

    # Setting this will prevent goreleaser to actually try to commit the updated
    # cask - instead, the cask file will be stored on the dist directory
    # only, leaving the responsibility of publishing it to the user.
    # If set to auto, the release will not be uploaded to the homebrew tap
    # in case there is an indicator for prerelease in the tag e.g. v1.0.0-rc1
    #
    # Templates: allowed.
    #skip_upload: true

    # Custom block for brew.
    # Can be used to specify alternate downloads for devel or head releases.
    #custom_block: |
    #  head "https://github.com/some/package.git"
    #  ...

    # Dependencies for the cask.
    #dependencies:
    #  - cask: some-cask
    #  - formula: some-formula

    # Packages that conflict with your cask.
    #conflicts:
    #  - cask: some-cask
    #  - formula: some-formula

    # Hooks for the cask lifecycle.
    #hooks:
    #  pre:
    #    install: |
    #      system_command "/usr/bin/defaults", args: ["write", "com.example.app", "key", "value"]
    #    uninstall: |
    #      system_command "/usr/bin/defaults", args: ["delete", "com.example.app"]
    #  post:
    #    install: |
    #      system_command "/usr/bin/open", args: ["#{appdir}/NanoID.app"]
    #    uninstall: |
    #      system_command "/usr/bin/rm", args: ["-rf", "~/.nanoid"]

    # Relative path to a Service that should be moved into the
    # ~/Library/Services folder on installation.
    #service: "nanoid.service"

    # Additional procedures for a more complete uninstall, including user files
    # and shared resources.
    #zap:
    #  launchctl:
    #    - "com.sixafter.nanoid.service"
    #  quit:
    #    - "com.sixafter.nanoid"
    #  login_item:
    #    - "com.sixafter.nanoid"
    #  trash:
    #    - "~/.nanoid"
    #    - "~/otherfile"
    #  delete:
    #    - "~/.nanoid"
    #    - "~/otherfile"

    # Procedures to uninstall a cask.
    # Optional unless a pkg or installer artifact stanza is used.
    #uninstall:
    #  launchctl:
    #    - "com.sixafter.nanoid.service"
    #  quit:
    #    - "com.sixafter.nanoid"
    #  login_item:
    #    - "com.sixafter.nanoid"
    #  trash:
    #    - "~/.nanoid"
    #    - "~/otherfile"
    #  delete:
    #    - "~/.nanoid"
    #    - "~/otherfile"

    # Repository to push the generated files to.
    repository:
      # Repository owner.
      #
      # Templates: allowed.
      owner: sixafter

      # Repository name.
      #
      # Templates: allowed.
      name: homebrew-tap

      # Optionally a branch can be provided.
      #
      # Default: default repository branch.
      # Templates: allowed.
      branch: main

      # Optionally a token can be provided, if it differs from the token
      # provided to GoReleaser
      #
      # Templates: allowed.
      token: "{{ .Env.X_GITHUB_TOKEN }}"

      # Optionally specify if this is a token from another SCM, allowing to
      # cross-publish.
      #
      # Only taken into account if `token` is set.
      #
      # Valid options:
      # - 'github'
      # - 'gitlab'
      # - 'gitea'
      #
      # This feature is only available in GoReleaser Pro.
      #token_type: "github"

      # Sets up pull request creation instead of just pushing to the given branch.
      # Make sure the 'branch' property is different from base before enabling
      # it.
      #
      # This might require a personal access token.
      pull_request:
        # Whether to enable it or not.
        enabled: true

        # Whether to open the PR as a draft or not.
        draft: true

        # If the pull request template has checkboxes, enabling this will
        # check all of them.
        #
        # This feature is only available in GoReleaser Pro, and when the pull
        # request is being opened on GitHub.
        # check_boxes: true

        # Base can also be another repository, in which case the owner and name
        # above will be used as HEAD, allowing cross-repository pull requests.
        base:
          owner: sixafter
          name: homebrew-tap
          branch: main

      # Clone, create the file, commit and push, to a regular Git repository.
      #
      # Notice that this will only have any effect if the given URL is not
      # empty.
      #git:
      #  url: 'ssh://git@github.com:sixafter/homebrew-tap.git'
      #  private_key: '{{ .Env.PRIVATE_KEY_PATH }}'
      #  ssh_command: 'ssh -i {{ .Env.KEY }} -o SomeOption=yes'
